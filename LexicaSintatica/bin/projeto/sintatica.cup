package projeto;

import java_cup.runtime.*;

parser code {: 
     public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
	
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException(message);
        //System.exit(1);
    }
   
:};

/* -------------------------------------------------- *
 *            Key Words Declarations                  *
 * -------------------------------------------------- */

terminal	ABSTRACT;
terminal	AS;
terminal	BASE;
terminal 	BOOL;
terminal 	BREAK;
terminal	BYTE;
terminal	CASE;
terminal	CATCH;
terminal	CHAR;
terminal	CHECKED;
terminal	CLASS;
terminal	CONST;
terminal	CONTINUE;
terminal	DECIMAL;
terminal	DEFAULT;
terminal	DELEGATE;
terminal	DO;
terminal	DOUBLE;
terminal	ELSE;
terminal	ENUM;
terminal	EVENT;
terminal	EXPLICIT;
terminal	EXTERN;
terminal	FINALLY;
terminal	FIXED;
terminal	FLOAT;
terminal	FOR;
terminal	FOREACH;
terminal	GOTO;
terminal	IF;
terminal	IMPLICIT;
terminal	IN;
terminal	INT;
terminal	INTERFACE;
terminal	INTERNAL;
terminal	IS;
terminal	LOCK;
terminal	LONG;
terminal	NAMESPACE;
terminal	NEW;
terminal	OBJECT;
terminal	OPERATOR;
terminal	OUT;
terminal	OVERRIDE;
terminal	PARAMS;
terminal	PRIVATE;
terminal	PROTECTED;
terminal	PUBLIC;
terminal	READONLY;
terminal	REF;
terminal	RETURN;
terminal	SBYTE;
terminal	SEALED;
terminal	SHORT;
terminal	SIZEOF;
terminal	STACKALLOC;
terminal	STATIC;
terminal	STRING;
terminal	STRUCT;
terminal	SWITCH;
terminal	THIS;
terminal	THROW;
terminal	TRY;
terminal	TYPEOF;
terminal	UINT;
terminal	ULONG;
terminal	UNCHECKED;
terminal	UNSAFE;
terminal	USHORT;
terminal	USING;
terminal	VIRTUAL;
terminal	VOID;
terminal	VOLATILE;
terminal	WHILE;


/* -------------------------------------------------- *
 *            Boolean Literals Declarations           *
 * -------------------------------------------------- */
 
 terminal	TRUE;
 terminal	FALSE;
 
 
/* -------------------------------------------------- *
 *            Null Literal Declarations               *
 * -------------------------------------------------- */
 
terminal	NULL;
 
/* -------------------------------------------------- *
 *            Operators and Punctuators Declarations  *
 * -------------------------------------------------- */
 
terminal	EQ;
terminal	GT;
terminal	LT;
terminal	NOT;
terminal	COMP;
terminal	QUESTION;
terminal	EQEQ;
terminal	LTEQ;
terminal	GTEQ;
terminal	NOTEQ;
terminal	ANDAND;
terminal	OROR;
terminal	PLUSPLUS;
terminal	MINUSMINUS;
terminal	PLUS;
terminal	MINUS;
terminal	MULT;
terminal	DIV;
terminal	AND;
terminal	OR;
terminal	XOR;
terminal	MOD;
terminal	LSHIFT;
terminal	RSHIFT;
terminal	PLUSEQ;
terminal	MINUSEQ;
terminal	MULTEQ;
terminal	DIVEQ;
terminal	ANDEQ;
terminal	OREQ;
terminal	XOREQ;
terminal	MODEQ;
terminal	LSHIFTEQ;
terminal	RSHIFTEQ;
terminal	LPAREN;
terminal	RPAREN;
terminal	LBRACE;
terminal	RBRACE;
terminal	LBRACK;
terminal	RBRACK;
terminal	COLON;
terminal	SEMICOLON;
terminal	COMMA;
terminal	DOT;

terminal	IDENTIFIER;
terminal	INTEGER_LITERAL;
terminal	REAL_LITERAL;
terminal	STRING_LITERAL;

terminal	GET;
terminal	SET;

terminal	ADD;
terminal	REMOVE;

terminal	ASSEMBLY;

terminal	FIELD;
terminal	METHOD;
terminal	MODULE;
terminal	PARAM;
terminal	PROPERTY;
terminal	TYPE;


/* -------------------------------------------------- *
 *            Main Productions Declarations           *
 * -------------------------------------------------- */
 
non terminal	namespace_name;
non terminal	type_name;
non terminal	namespace_or_type_name;
non terminal	type;
non terminal	variable_reference;
non terminal	argument_list;
non terminal	statement;
non terminal	compilation_unit;
non terminal	class_declaration;
non terminal	struct_declaration;
non terminal	array_type;
non terminal	interface_declaration;
non terminal	enum_declaration;
non terminal	delegate_declaration;
non terminal	global_attributes;
non terminal	namespace_or_type_name_line;

non terminal	literal;

/* -------------------------------------------------- *
 *                 Types Declarations                 *
 * -------------------------------------------------- */

non terminal	InterfaceType;
non terminal	ArrayType;

/* -------------------------------------------------- *
 *              Expressions Declarations              *
 * -------------------------------------------------- */

non terminal	Argument;
non terminal	PrimaryExpression;
non terminal	PrimaryNoArrayCreationExpression;
non terminal	ParenthesizedExpression;
non terminal	MemberAccess;
non terminal	PredefinedType;
non terminal	InvocationExpression;
non terminal	ElementAccess;
non terminal	ExpressionList;
non terminal	ThisAccess;
non terminal	BaseAccess;
non terminal	PostIncrementExpression;
non terminal	PostDecrementExpression;
non terminal	ObjectCreationExpression;
non terminal	ArrayCreationExpression;
non terminal	DelegateCreationExpression;
non terminal	TypeofExpression;
non terminal	SizeofExpression;
non terminal	CheckedExpression;
non terminal	UncheckedExpression;
non terminal	UnaryExpression;
non terminal	PreIncrementExpression;
non terminal	PreDecrementExpression;
non terminal	CastExpression;
non terminal	MultiplicativeExpression;
non terminal	AdditiveExpression;
non terminal	ShiftExpression;
non terminal	RelationalExpression;
non terminal	EqualityExpression;
non terminal	AndExpression;
non terminal	ExclusiveOrExpression;
non terminal	InclusiveOrExpression;
non terminal	ConditionalAndExpression;
non terminal	ConditionalOrExpression;
non terminal	ConditionalExpression;
non terminal	Assignment;
non terminal	AssignmentOperator;
non terminal	Expression;
non terminal	ConstantExpression;

/* -------------------------------------------------- *
 *              Statements Declarations               *
 * -------------------------------------------------- */
 
non terminal	EmbeddedStatement;
non terminal	Block;
non terminal	StatementList;
non terminal	EmptyStatement;
non terminal	LabeledStatement;
non terminal	DeclarationStatement;
non terminal	ExpressionStatement;
non terminal	JumpStatement;
non terminal	TryStatement;
non terminal	CheckedStatement;
non terminal	UncheckedStatement;
non terminal	LockStatement;
non terminal	UsingStatement;
non terminal	LocalVariableDeclaration;
non terminal	LocalConstantDeclaration;
non terminal	LocalVariableDeclarators;
non terminal	LocalVariableDeclarator;
non terminal	LocalVariableInitializer;
non terminal	StatementExpression;
non terminal	SelectionStatement;
non terminal	IfStatement;
non terminal	SwitchStatement;
non terminal	BooleanExpression;
non terminal	SwitchBlock;
non terminal	SwitchSections;
non terminal	SwitchSection;
non terminal	SwitchLabels;
non terminal	SwitchLabel;
non terminal	IterationStatement;
non terminal	WhileStatement;
non terminal	DoStatement;
non terminal	ForStatement;
non terminal	ForeachStatement;
non terminal	ForInitializer;
non terminal	ForCondition;
non terminal	ForIterator;
non terminal	StatementExpressionList;
non terminal	BreakStatement;
non terminal	ContinueStatement;
non terminal	GotoStatement;
non terminal	ReturnStatement;
non terminal	ThrowStatement;
non terminal	CatchClauses;
non terminal	SpecificCatchClauses;
non terminal	SpecificCatchClause;
non terminal	GeneralCatchClause;
non terminal	FinallyClause;
non terminal	UncheckedCatchClause;
non terminal	ResourceAcquisition;

/* -------------------------------------------------- *
 *               Namespace Declarations               *
 * -------------------------------------------------- */

non terminal	UsingDirectives;
non terminal	NamespaceMemberDeclarations;
non terminal	NamespaceMemberDeclaration;
non terminal	NamespaceDeclaration;
non terminal	QualifiedIdentifier;
non terminal	NamespaceBody;
non terminal	UsingDirective;
non terminal	UsingAliasDirective;
non terminal	UsingNamespaceDirective;
non terminal	TypeDeclaration;

/* -------------------------------------------------- *
 *                Classes Declarations                *
 * -------------------------------------------------- */
 
non terminal	ClassBase;
non terminal	InterfaceTypeList;
non terminal	ClassBody;
non terminal	ClassMemberDeclarations;
non terminal	ClassMemberDeclaration;
non terminal	ConstantDeclaration;
non terminal	ConstantDeclarators;
non terminal	ConstantDeclarator;
non terminal	FieldDeclaration;
non terminal	VariableDeclarators;
non terminal	VariableDeclarator;
non terminal	VariableInitializer;
non terminal	MethodDeclaration;
non terminal	MethodHeader;
non terminal	ReturnType;
non terminal	MemberName;
non terminal	MethodBody;
non terminal	FormalParameterList;
non terminal	FixedParameters;
non terminal	FixedParameter;
non terminal	ParameterArray;
non terminal	PropertyDeclaration;
non terminal	AcessorDeclarations;
non terminal	GetAcessorDeclaration;
non terminal	SetAcessorDeclaration;
non terminal	AcessorBody;
non terminal	EventDeclaration;
non terminal	EventAcessorDeclarations;
non terminal	AddAcessorDeclaration;
non terminal	RemoveAcessorDeclaration;
non terminal	IndexerDeclaration;
non terminal	IndexerDeclarator;
non terminal	OperatorDeclaration;
non terminal	OperatorDeclarator;
non terminal	UnaryOperatorDeclarator;
non terminal	BinaryOperatorDeclarator;
non terminal	ConversionOperatorDeclarator;
non terminal	OperatorBody;
non terminal	ConstructorDeclaration;
non terminal	ConstructorDeclarator;
non terminal	ConstructorInitializer;
non terminal	ConstructorBody;
non terminal	StaticConstructorDeclaration;
non terminal	StaticConstructorBody;
non terminal	DestructorDeclaration;
non terminal	DestructorBody;

/* -------------------------------------------------- *
 *                Structs Declarations                *
 * -------------------------------------------------- */

non terminal	StructInterfaces;
non terminal	StructMemberDeclarations;
non terminal	StructMemberDeclaration;

/* -------------------------------------------------- *
 *                 Array Declarations                 *
 * -------------------------------------------------- */

non terminal	NonArrayType;
non terminal	RankSpecifiers;
non terminal	RankSpecifier;
non terminal	DimSeparators; 
non terminal	ArrayInitializer;
non terminal	VariableInitializerList;

/* -------------------------------------------------- *
 *               Interfaces Declarations              *
 * -------------------------------------------------- */
 
non terminal	InterfaceBase;
non terminal	InterfaceMemberDeclarations;
non terminal	InterfaceMemberDeclaration;
non terminal	InterfaceMethodDeclaration;
non terminal	InterfacePropertyDeclaration;
non terminal	InterfaceAcessors;
non terminal	InterfaceEventDeclaration;
non terminal	InterfaceIndexerDeclaration;

/* -------------------------------------------------- *
 *                 Enum Declarations                  *
 * -------------------------------------------------- */

non terminal	EnumBase;
non terminal	EnumMemberDeclarations;
non terminal	EnumMemberDeclaration;

/* -------------------------------------------------- *
 *              Attributes Declarations               *
 * -------------------------------------------------- */
 
non terminal	GlobalAttributeSections;
non terminal	GlobalAttributeSection;
non terminal	GlobalAttributeTargetSpecifier;
non terminal	Attributes;
non terminal	AttributeSections;
non terminal	AttributeSection;
non terminal	AttributeTargetSpecifier;
non terminal	AttributeTarget;
non terminal	AttributeList;
non terminal	Attribute;
non terminal	AttributeName;
non terminal	AttributeArguments;
non terminal	PositionalArgumentList;
non terminal	PositionalArgument;
non terminal	NamedArgumentList;
non terminal	NamedArgument;
non terminal	AttributeArgumentExpression;

/* -------------------------------------------------- *
 *             Possibilities Declarations             *
 * -------------------------------------------------- */

non terminal	Modifier;
non terminal	Modifier_Opt;
non terminal	Modifiers;
non terminal	Modifiers_Opt;
non terminal	ClassMemberDeclaration_Possibilities;
non terminal	Operator;
non terminal	IntegralType_Possibilities;
non terminal	StructMemberDeclaration_Possibilities;
non terminal	EmbeddedStatement_Possibilities;
non terminal	StatementExpression_Possibilities;

/* -------------------------------------------------- *
 *               Repetition Declarations              *
 * -------------------------------------------------- */
 
non terminal	AttributesOpt_ModifiersOpt_Event_Type;
non terminal	Operator_Type_Lparen_Type_Identifier_Rparen;
non terminal	AttributesOpt_Get_Semicolon;
non terminal	AttributesOpt_Set_Semicolon;
non terminal	AttibutesOpt_Identifier;
 
/* -------------------------------------------------- *
 *                Optional Declarations               *
 * -------------------------------------------------- */

non terminal	UsingDirectives_Opt;
non terminal	GlobalAttributes_Opt;
non terminal	NamespaceMemberDeclarations_Opt;
non terminal	Semicolon_Opt;
non terminal	Attributes_Opt;
non terminal	ClassBase_Opt;
non terminal	ClassMemberDeclarations_Opt;
non terminal	FormalParameterList_Opt;
non terminal	SetAcessorDeclaration_Opt;
non terminal	GetAcessorDeclaration_Opt;
non terminal	ConstructorInitializer_Opt;
non terminal	ArgumentList_Opt;
non terminal	DimSeparators_Opt;
non terminal	VariableInitializerList_Opt;
non terminal	InterfaceBase_Opt;
non terminal	InterfaceMemberDeclarations_Opt;
non terminal	StructInterfaces_Opt;
non terminal	StructMemberDeclarations_Opt;
non terminal	EnumBase_Opt;
non terminal	EnumMemberDeclarations_Opt;
non terminal	AttributeTargetSpecifier_Opt;
non terminal	AttributeArguments_Opt;
non terminal	PositionalArgumentList_Opt;
non terminal	Comma_Opt;
non terminal	StatementList_Opt;
non terminal	SwitchSections_Opt;
non terminal	ForInitializer_Opt;
non terminal	ForCondition_Opt;
non terminal	ForIterator_Opt;
non terminal	Expression_Opt;
non terminal	GeneralCatchClause_Opt;
non terminal	SpecificCatchClauses_Opt;
non terminal	Identifier_Opt;
non terminal	RankSpecifiers_Opt;
non terminal	ArrayInitializer_Opt;



precedence left 	THIS, OPERATOR;
precedence left		STATIC;
precedence left 	IDENTIFIER;
precedence left 	BOOL, DECIMAL; 
precedence left 	SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, DOUBLE, FLOAT, STRING, OBJECT;
precedence left 	LBRACE, RBRACE;
precedence left 	LBRACK, RBRACK;
precedence left 	LPAREN, RPAREN;
precedence left 	IF, ELSE, RETURN, CONTINUE, BREAK;
precedence left		CATCH, WHILE;
precedence left		FINALLY;
precedence left		DOT;



start with compilation_unit;

/* ################################################## */
/* #################### GRAMMAR ##################### */
/* ################################################## */


literal
	::= TRUE | FALSE |
		INTEGER_LITERAL |
		REAL_LITERAL |
		STRING_LITERAL |
		NULL
		;

/* -------------------------------------------------- *
 *                   Basic Concepts                   *
 * -------------------------------------------------- */

namespace_name
	::= namespace_or_type_name
		;
		
type_name
	::= namespace_or_type_name
		;
		
namespace_or_type_name
	::= IDENTIFIER | 
		namespace_or_type_name DOT IDENTIFIER
		;
		
namespace_or_type_name_line
	::= | namespace_or_type_name DOT IDENTIFIER
		;
		
/* -------------------------------------------------- *
 *                       Types                        *
 * -------------------------------------------------- */
 
type
	::= namespace_or_type_name |
		IntegralType_Possibilities |
		BOOL |
		FLOAT |
		DOUBLE |
		DECIMAL |
		OBJECT |
		STRING |
		array_type
		;
		 
/* -------------------------------------------------- *
 *                     Variables                      *
 * -------------------------------------------------- */
 
variable_reference
	::= Expression
		;
 
/* -------------------------------------------------- *
 *                    Expressions                     *
 * -------------------------------------------------- */

argument_list
	::= Argument |
		argument_list COMMA Argument
		;
		
Argument
	::= Expression |
		REF variable_reference |
		OUT variable_reference
		;
		
PrimaryExpression
	::= PrimaryNoArrayCreationExpression |
		ArrayCreationExpression
		;
		
PrimaryNoArrayCreationExpression
	::= literal |
		IDENTIFIER |
		ParenthesizedExpression |
		MemberAccess |
		InvocationExpression |
		ElementAccess |
		ThisAccess |
		BaseAccess |
		PostIncrementExpression |
		PostDecrementExpression |
		ObjectCreationExpression |
		DelegateCreationExpression |
		TypeofExpression |
		SizeofExpression |
		CheckedExpression |
		UncheckedExpression
		;
		
ParenthesizedExpression
	::= LPAREN Expression RPAREN
		;
		
MemberAccess
	::= PrimaryExpression DOT IDENTIFIER |
		PredefinedType DOT IDENTIFIER
		;
		
PredefinedType
	::= BOOL | BYTE | CHAR | DECIMAL | DOUBLE | FLOAT | INT | LONG |
		OBJECT | SBYTE | SHORT | STRING | UINT | ULONG | USHORT
		;		

InvocationExpression
	::= PrimaryExpression LPAREN ArgumentList_Opt RPAREN
		;
		
ElementAccess
	::= PrimaryNoArrayCreationExpression LBRACK ExpressionList RBRACK
		;
		
ExpressionList
	::= Expression |
		ExpressionList COMMA Expression
		;
		
ThisAccess
	::= THIS
		;
		
BaseAccess
	::= BASE DOT IDENTIFIER |
		BASE LBRACK ExpressionList RBRACK
		;

PostIncrementExpression
	::= PrimaryExpression PLUSPLUS
		;
		
PostDecrementExpression
	::= PrimaryExpression MINUSMINUS
		;
		
ObjectCreationExpression
	::= NEW type LPAREN ArgumentList_Opt RPAREN |
		NEW namespace_or_type_name LPAREN ArgumentList_Opt RPAREN
		;
		
ArrayCreationExpression
	::= NEW NonArrayType LBRACK ExpressionList RBRACK RankSpecifiers_Opt ArrayInitializer_Opt |
		NEW array_type ArrayInitializer
		;
		
DelegateCreationExpression
	::= NEW namespace_or_type_name LPAREN Expression RPAREN
		;
		
TypeofExpression
	::= TYPEOF LPAREN type RPAREN |
		TYPEOF LPAREN VOID RPAREN
		;
		
CheckedExpression
	::= CHECKED LPAREN Expression RPAREN
		;
		
UncheckedExpression
	::= UNCHECKED LPAREN Expression RPAREN
		;
		
UnaryExpression
	::= PrimaryExpression |
		PLUS UnaryExpression |
		MINUS UnaryExpression |
		NOT UnaryExpression |
		COMP UnaryExpression |
		MULT UnaryExpression |
		PreIncrementExpression |
		PreDecrementExpression |
		CastExpression
		;
		
PreIncrementExpression
	::= PLUSPLUS PrimaryExpression
		;
		
PreDecrementExpression
	::= MINUSMINUS PrimaryExpression
		;
		
CastExpression
	::= LPAREN type RPAREN UnaryExpression
		;
		
MultiplicativeExpression
	::= UnaryExpression |
		MultiplicativeExpression MULT UnaryExpression |
		MultiplicativeExpression DIV UnaryExpression |
		MultiplicativeExpression MOD UnaryExpression
		;
		
AdditiveExpression
	::= MultiplicativeExpression |
		AdditiveExpression PLUS MultiplicativeExpression |
		AdditiveExpression MINUS MultiplicativeExpression
		;
		
ShiftExpression
	::= AdditiveExpression |
		ShiftExpression LSHIFT AdditiveExpression |
		ShiftExpression RSHIFT AdditiveExpression
		;
		
RelationalExpression
	::= ShiftExpression |
		RelationalExpression LT ShiftExpression |
		RelationalExpression GT ShiftExpression |
		RelationalExpression LTEQ ShiftExpression |
		RelationalExpression GTEQ ShiftExpression |
		RelationalExpression IS ShiftExpression |
		RelationalExpression AS ShiftExpression
		;
		
EqualityExpression
	::= RelationalExpression |
		EqualityExpression EQEQ RelationalExpression |
		EqualityExpression NOTEQ RelationalExpression
		;
		
AndExpression
	::= EqualityExpression | 
		EqualityExpression AND EqualityExpression
		;
		
ExclusiveOrExpression
	::= AndExpression |
		ExclusiveOrExpression XOR AndExpression
		;
		
InclusiveOrExpression
	::= ExclusiveOrExpression |
		InclusiveOrExpression OR ExclusiveOrExpression
		;
		
ConditionalAndExpression
	::= InclusiveOrExpression |
		ConditionalAndExpression ANDAND InclusiveOrExpression
		;
		
ConditionalOrExpression
	::= ConditionalAndExpression |
		ConditionalOrExpression OROR ConditionalAndExpression
		;
		
ConditionalExpression
	::= ConditionalOrExpression |
		ConditionalOrExpression QUESTION Expression COLON Expression
		;
		
Assignment
	::= UnaryExpression AssignmentOperator Expression
		;
		
AssignmentOperator
	::= EQ | PLUSEQ | MINUSEQ | MULTEQ | DIVEQ | MODEQ | ANDEQ | OREQ | XOREQ | LSHIFTEQ | RSHIFTEQ
		;
		
Expression
	::= ConditionalExpression |
		Assignment
		;
		
ConstantExpression
	::= Expression
		;

/* -------------------------------------------------- *
 *                     Statements                     *
 * -------------------------------------------------- */

statement
	::= LabeledStatement |
		DeclarationStatement |
		EmbeddedStatement
		;
		
EmbeddedStatement
	::= EmbeddedStatement_Possibilities
		;
		
Block
	::= LBRACE StatementList_Opt RBRACE
		;
		
StatementList
	::= statement |
		StatementList statement
		;
		
EmptyStatement
	::= SEMICOLON
		;
		
LabeledStatement
	::= IDENTIFIER COLON statement
		;
		
DeclarationStatement
	::= LocalVariableDeclaration SEMICOLON |
		LocalConstantDeclaration SEMICOLON
		;
		
LocalVariableDeclaration
	::= type LocalVariableDeclarators
		;
		
LocalVariableDeclarators
	::= LocalVariableDeclarator |
		LocalVariableDeclarators COMMA LocalVariableDeclarator
		;
		
LocalVariableDeclarator
	::= IDENTIFIER |
		IDENTIFIER EQ LocalVariableInitializer
		;
		
LocalVariableInitializer
	::= Expression |
		ArrayInitializer
		;
		
LocalConstantDeclaration
	::= CONST type ConstantDeclarators
		;

ExpressionStatement
	::= StatementExpression SEMICOLON
		;
		
StatementExpression
	::= StatementExpression_Possibilities
		;
		
SelectionStatement
	::= IfStatement |
		SwitchStatement
		;
		
IfStatement
	::= IF LPAREN BooleanExpression RPAREN EmbeddedStatement |
		IF LPAREN BooleanExpression RPAREN EmbeddedStatement ELSE EmbeddedStatement
		;
		
BooleanExpression
	::= Expression
		;
		
SwitchStatement
	::= SWITCH LPAREN Expression RPAREN SwitchBlock
		;
		
SwitchBlock
	::= LBRACE SwitchSections_Opt RBRACE
		;
		
SwitchSections
	::= SwitchSection |
		SwitchSections SwitchSection
		;

SwitchSection
	::= SwitchLabels StatementList
		;
		
SwitchLabels
	::= SwitchLabel |
		SwitchLabels SwitchLabel
		;
		
SwitchLabel
	::= CASE ConstantExpression COLON |
		DEFAULT COLON
		;
		
IterationStatement
	::= WhileStatement |
		DoStatement |
		ForStatement |
		ForeachStatement
		;
		
WhileStatement
	::= WHILE LPAREN Expression RPAREN EmbeddedStatement
		;
		
DoStatement
	::= DO EmbeddedStatement WHILE LPAREN BooleanExpression RPAREN SEMICOLON
		;
		
ForStatement
	::= FOR LPAREN ForInitializer_Opt SEMICOLON ForCondition_Opt SEMICOLON ForIterator_Opt RPAREN EmbeddedStatement
		;
		
ForInitializer
	::= LocalVariableDeclaration |
		StatementExpressionList
		;

ForCondition
	::= BooleanExpression
		;
		
ForIterator
	::= StatementExpressionList
		;

StatementExpressionList
	::= StatementExpression |
		StatementExpressionList COMMA StatementExpression
		;
		
ForeachStatement
	::= FOREACH LPAREN type IDENTIFIER IN Expression RPAREN EmbeddedStatement
		;
		
JumpStatement
	::= BreakStatement |
		ContinueStatement |
		GotoStatement |
		ReturnStatement |
		ThrowStatement
		;
		
BreakStatement
	::= BREAK SEMICOLON
		;
		
ContinueStatement
	::= CONTINUE SEMICOLON
		;
		
GotoStatement
	::= GOTO IDENTIFIER |
		GOTO CASE ConstantExpression SEMICOLON |
		GOTO DEFAULT SEMICOLON
		;
		
ReturnStatement
	::= RETURN Expression_Opt SEMICOLON
		;
		
ThrowStatement
	::= THROW Expression_Opt SEMICOLON
		;
	
TryStatement
	::= TRY Block CatchClauses |
		TRY Block FinallyClause |
		TRY Block CatchClauses FinallyClause
		;
		
CatchClauses
	::= SpecificCatchClauses GeneralCatchClause_Opt |
		SpecificCatchClauses_Opt GeneralCatchClause
		;
		
SpecificCatchClauses
	::= SpecificCatchClause |
		SpecificCatchClauses SpecificCatchClause
		;
		
SpecificCatchClause
	::= CATCH LPAREN type Identifier_Opt RPAREN Block
		;
		
GeneralCatchClause
	::= CATCH Block
		;
		
FinallyClause
	::= FINALLY Block
		;
		
CheckedStatement
	::= CHECKED Block
		;
		
UncheckedStatement
	::= UNCHECKED Block
		;
		
LockStatement
	::= LOCK LPAREN Expression RPAREN EmbeddedStatement
		;
		
UsingStatement
	::= USING LPAREN ResourceAcquisition RPAREN EmbeddedStatement
		;
		
ResourceAcquisition
	::= LocalVariableDeclaration |
		Expression
		;

/* -------------------------------------------------- *
 *                     Namespaces                     *
 * -------------------------------------------------- */

compilation_unit
	::= UsingDirectives_Opt GlobalAttributes_Opt NamespaceMemberDeclarations_Opt
		;


NamespaceDeclaration
	::= NAMESPACE QualifiedIdentifier NamespaceBody Semicolon_Opt
		;
		
QualifiedIdentifier
	::= IDENTIFIER |
		QualifiedIdentifier DOT IDENTIFIER
		;
		
NamespaceBody
	::= LBRACE UsingDirectives_Opt NamespaceMemberDeclarations_Opt RBRACE
		;
	
UsingDirectives
	::= UsingDirective |
		UsingDirectives UsingDirective
		;
		
UsingDirective
	::= UsingAliasDirective |
		UsingNamespaceDirective
		;
	
UsingAliasDirective
	::= USING IDENTIFIER EQ namespace_or_type_name SEMICOLON
		;
		
UsingNamespaceDirective
	::= USING namespace_name SEMICOLON
		;

NamespaceMemberDeclarations
	::= NamespaceMemberDeclaration |
		NamespaceMemberDeclarations NamespaceMemberDeclaration
		;

NamespaceMemberDeclaration
	::= NamespaceDeclaration |
		TypeDeclaration
		;
		
TypeDeclaration
	::= class_declaration |
		struct_declaration |
		interface_declaration |
		enum_declaration |
		delegate_declaration
		;
		
/* -------------------------------------------------- *
 *                      Classes                       *
 * -------------------------------------------------- */

class_declaration
	::= Attributes_Opt Modifiers_Opt CLASS IDENTIFIER ClassBase_Opt ClassBody Semicolon_Opt
		;
		
ClassBase
	::= COLON type |
		COLON InterfaceTypeList |
		COLON type COMMA InterfaceTypeList
		;
		
InterfaceTypeList
	::= type_name |
		InterfaceTypeList COMMA type_name
		;
		
ClassBody
	::= LBRACE ClassMemberDeclarations_Opt RBRACE
		;
		
ClassMemberDeclarations
	::= ClassMemberDeclaration |
		ClassMemberDeclarations ClassMemberDeclaration
		;
		
ClassMemberDeclaration
	::= ClassMemberDeclaration_Possibilities
		;

ConstantDeclaration
	::= Attributes_Opt Modifiers_Opt CONST type ConstantDeclarators SEMICOLON
		;
		
ConstantDeclarators
	::= ConstantDeclarator |
		ConstantDeclarators COMMA ConstantDeclarator
		;
		
ConstantDeclarator
	::= IDENTIFIER EQ ConstantExpression
		;
		
FieldDeclaration
	::= Attributes_Opt Modifiers_Opt type VariableDeclarators SEMICOLON
		;
		
VariableDeclarators
	::= VariableDeclarator |
		VariableDeclarators COMMA VariableDeclarator
		;
		
VariableDeclarator
	::= IDENTIFIER |
		IDENTIFIER EQ VariableInitializer
		;
		
VariableInitializer
	::= Expression |
		ArrayInitializer
		;
		
MethodDeclaration
	::= MethodHeader MethodBody
		;
		
MethodHeader
	::= Attributes_Opt Modifiers_Opt ReturnType MemberName LPAREN FormalParameterList_Opt RPAREN
		;
		
ReturnType
	::= type |
		VOID
		;
		
MemberName
	::= IDENTIFIER |
		InterfaceType DOT IDENTIFIER
		;
		
MethodBody
	::= Block |
		SEMICOLON
		;
		
FormalParameterList
	::= FixedParameters |
		FixedParameters COMMA ParameterArray |
		ParameterArray
		;
		
FixedParameters
	::= FixedParameter |
		FixedParameters COMMA FixedParameter
		;
		
FixedParameter
	::= Attributes_Opt Modifier_Opt type IDENTIFIER
		;
		
ParameterArray
	::= Attributes_Opt PARAMS array_type IDENTIFIER
		;
		
PropertyDeclaration
	::= Attributes_Opt Modifiers_Opt type MemberName LBRACE AcessorDeclarations RBRACE
		;

AcessorDeclarations
	::= GetAcessorDeclaration SetAcessorDeclaration_Opt |
		SetAcessorDeclaration GetAcessorDeclaration_Opt
		;
		
GetAcessorDeclaration
	::= Attributes_Opt GET AcessorBody
		;
		
SetAcessorDeclaration
	::= Attributes_Opt SET AcessorBody
		;
		
AcessorBody
	::= Block |
		SEMICOLON
		;
		
EventDeclaration
	::= Attributes_Opt Modifiers_Opt EVENT type VariableDeclarators SEMICOLON |
		Attributes_Opt Modifiers_Opt EVENT type MemberName LBRACE EventAcessorDeclarations RBRACE
		;
		
EventAcessorDeclarations
	::= AddAcessorDeclaration RemoveAcessorDeclaration |
		RemoveAcessorDeclaration AddAcessorDeclaration
		;
		
AddAcessorDeclaration
	::= Attributes_Opt ADD Block
		;
		
RemoveAcessorDeclaration
	::= Attributes_Opt REMOVE Block
		;
		
IndexerDeclaration
	::= Attributes_Opt Modifiers_Opt IndexerDeclarator LBRACE AcessorDeclarations RBRACE
		;
		
IndexerDeclarator
	::= type THIS LBRACK FormalParameterList RBRACK |
		type namespace_or_type_name DOT THIS LBRACK FormalParameterList RBRACK
		;
		
OperatorDeclaration
	::= Attributes_Opt Modifiers OperatorDeclarator OperatorBody
		;
		
OperatorDeclarator
	::= UnaryOperatorDeclarator |
		BinaryOperatorDeclarator |
		ConversionOperatorDeclarator
		;
		
UnaryOperatorDeclarator
	::= type OPERATOR Operator LPAREN type IDENTIFIER RPAREN
		;
		
BinaryOperatorDeclarator
	::= type OPERATOR Operator LPAREN type IDENTIFIER COMMA type IDENTIFIER RPAREN
		;
		
ConversionOperatorDeclarator
	::= IMPLICIT OPERATOR type LPAREN type IDENTIFIER RPAREN |
		EXPLICIT OPERATOR type LPAREN type IDENTIFIER RPAREN
		;
		
OperatorBody
	::= Block |
		SEMICOLON
		;

ConstructorDeclaration
	::= Attributes_Opt Modifiers_Opt IDENTIFIER LPAREN FormalParameterList_Opt RPAREN ConstructorInitializer_Opt ConstructorBody
		;
		
ConstructorInitializer
	::= COLON BASE LPAREN ArgumentList_Opt RPAREN |
		COLON THIS LPAREN ArgumentList_Opt RPAREN
		;
		
ConstructorBody
	::= Block |
		SEMICOLON
		;
		
StaticConstructorDeclaration
	::= Attributes_Opt Modifiers IDENTIFIER LPAREN RPAREN StaticConstructorBody
		;

StaticConstructorBody
	::= Block |
		SEMICOLON
		;

DestructorDeclaration
	::= Attributes_Opt EXTERN COMP IDENTIFIER LPAREN RPAREN DestructorBody |
		Attributes_Opt COMP IDENTIFIER LPAREN RPAREN DestructorBody
		;
		
DestructorBody
	::= Block
		;
		
/* -------------------------------------------------- *
 *                      Structs                       *
 * -------------------------------------------------- */
 
struct_declaration
	::= Attributes_Opt Modifiers_Opt STRUCT IDENTIFIER StructInterfaces_Opt LBRACE StructMemberDeclarations_Opt RBRACE Semicolon_Opt
		;
 
StructInterfaces
	::= COLON InterfaceTypeList
		;
		
StructMemberDeclarations
	::= StructMemberDeclaration |
		StructMemberDeclarations StructMemberDeclaration
		;
		
StructMemberDeclaration
	::= StructMemberDeclaration_Possibilities
		;
		
/* -------------------------------------------------- *
 *                       Arrays                       *
 * -------------------------------------------------- */
 
array_type
	::= NonArrayType RankSpecifiers
		;
		
NonArrayType
	::= type;
	
RankSpecifiers
	::= RankSpecifier |
		RankSpecifiers RankSpecifier
		;

RankSpecifier
	::= LBRACK DimSeparators_Opt RBRACK
		;
		
DimSeparators
	::= COMMA |
		DimSeparators COMMA
		;
		
ArrayInitializer
	::= LBRACE VariableInitializerList_Opt RBRACE |
		LBRACE VariableInitializerList COMMA RBRACE
		;
		
VariableInitializerList
	::= VariableInitializer |
		VariableInitializerList COMMA VariableInitializer
		;
		
/* -------------------------------------------------- *
 *                     Interfaces                     *
 * -------------------------------------------------- */
 
interface_declaration
	::= Attributes_Opt Modifiers_Opt INTERFACE IDENTIFIER InterfaceBase_Opt LBRACE InterfaceMemberDeclarations_Opt RBRACE Semicolon_Opt
		;
		
InterfaceBase
	::= COLON InterfaceTypeList
		;
		
InterfaceMemberDeclarations
	::= InterfaceMemberDeclaration |
		InterfaceMemberDeclarations InterfaceMemberDeclaration
		;
		
InterfaceMemberDeclaration
	::= InterfaceMethodDeclaration |
		InterfacePropertyDeclaration |
		InterfaceEventDeclaration |
		InterfaceIndexerDeclaration
		;

InterfaceMethodDeclaration
	::= Attributes_Opt Modifier_Opt ReturnType IDENTIFIER LPAREN FormalParameterList_Opt RPAREN SEMICOLON
		;
		
InterfacePropertyDeclaration
	::= Attributes_Opt Modifier_Opt type IDENTIFIER LBRACE InterfaceAcessors RBRACE
		;
		
InterfaceAcessors
	::= AttributesOpt_Get_Semicolon |
		AttributesOpt_Set_Semicolon |
		AttributesOpt_Get_Semicolon AttributesOpt_Set_Semicolon |
		AttributesOpt_Set_Semicolon AttributesOpt_Get_Semicolon
		;
		
InterfaceEventDeclaration
	::= Attributes_Opt Modifier_Opt EVENT type IDENTIFIER SEMICOLON
		;
		
InterfaceIndexerDeclaration
	::= Attributes_Opt Modifier_Opt type THIS LBRACK FormalParameterList RBRACK LBRACE InterfaceAcessors RBRACE
		;
		
/* -------------------------------------------------- *
 *                        Enum                        *
 * -------------------------------------------------- */
 
enum_declaration
	::= Attributes_Opt Modifiers_Opt ENUM IDENTIFIER EnumBase_Opt LBRACE RBRACE Semicolon_Opt |
		Attributes_Opt Modifiers_Opt ENUM IDENTIFIER EnumBase_Opt LBRACE EnumMemberDeclarations COMMA RBRACE Semicolon_Opt
		;
		
EnumBase
	::= COLON IntegralType_Possibilities
		;
				
EnumMemberDeclarations
	::= EnumMemberDeclaration |
		EnumMemberDeclarations COMMA EnumMemberDeclaration
		;
		
EnumMemberDeclaration
	::= AttibutesOpt_Identifier |
		AttibutesOpt_Identifier EQ ConstantExpression
		;
		
/* -------------------------------------------------- *
 *                     Delegates                      *
 * -------------------------------------------------- */
 
delegate_declaration
	::= Attributes_Opt Modifiers_Opt DELEGATE ReturnType IDENTIFIER LPAREN FormalParameterList_Opt RPAREN SEMICOLON
		;
		
/* -------------------------------------------------- *
 *                     Attributes                     *
 * -------------------------------------------------- */
 
global_attributes
	::= GlobalAttributeSections
		;
		
GlobalAttributeSections
	::= GlobalAttributeSection |
		GlobalAttributeSections GlobalAttributeSection
		;
		

GlobalAttributeSection
	::= LBRACK ASSEMBLY COLON AttributeList Comma_Opt RBRACK |
		LBRACK MODULE COLON AttributeList Comma_Opt RBRACK
		;
		
Attributes
	::= AttributeSections
		;
		
AttributeSections
	::= AttributeSection |
		AttributeSections AttributeSection
		;

AttributeSection
	::= LBRACK AttributeTargetSpecifier_Opt AttributeList Comma_Opt RBRACK
		;
		
AttributeTargetSpecifier
	::= AttributeTarget COLON
		;
		
AttributeTarget
	::= FIELD | EVENT | METHOD | PARAM | PROPERTY | RETURN | TYPE
		;
		
AttributeList
	::= Attribute |
		AttributeList COMMA Attribute
		;
		
Attribute
	::= AttributeName AttributeArguments_Opt
		;
		
AttributeName
	::= type_name
		;
		
AttributeArguments
	::= LPAREN PositionalArgumentList_Opt RPAREN |
		LPAREN PositionalArgumentList COMMA NamedArgumentList RPAREN |
		LPAREN NamedArgumentList RPAREN
		;
		
PositionalArgumentList
	::= PositionalArgument |
		PositionalArgumentList COMMA PositionalArgument
		;

PositionalArgument
	::= AttributeArgumentExpression
		;
		
NamedArgumentList
	::= NamedArgument |
		NamedArgumentList COMMA NamedArgument
		;
		
NamedArgument
	::= IDENTIFIER EQ AttributeArgumentExpression
		;
		
AttributeArgumentExpression
	::= Expression
		;
				
/* -------------------------------------------------- *
 *                   Possibilities                    *
 * -------------------------------------------------- */
 
Modifier
	::= NEW | PUBLIC | PROTECTED | INTERNAL | PRIVATE | ABSTRACT | SEALED |
		STATIC | READONLY | VOLATILE | VIRTUAL | OVERRIDE | EXTERN | REF | OUT |
		STATIC EXTERN | EXTERN STATIC
		;
		
Modifier_Opt
	::= | Modifier
		;
		
Modifiers
	::= Modifier |
		Modifiers Modifier
		;
		
Modifiers_Opt
	::= | Modifiers
		;
		
Operator
	::= PLUS | MINUS | MULT | DIV | MOD | AND | OR | XOR | LSHIFT | RSHIFT | NOTEQ | GT | LT | GTEQ | LTEQ |
		COMP | PLUSPLUS | MINUSMINUS | TRUE | FALSE
		;
		
IntegralType_Possibilities
	::= SBYTE | BYTE | SHORT | USHORT | INT | UINT | LONG | ULONG | CHAR
		;
		
ClassMemberDeclaration_Possibilities
	::= ConstantDeclaration |
		FieldDeclaration |
		MethodDeclaration |
		PropertyDeclaration |
		EventDeclaration |
		IndexerDeclaration |
		OperatorDeclaration |
		ConstructorDeclaration |
		DestructorDeclaration |
		StaticConstructorDeclaration |
		TypeDeclaration
		;
		
StructMemberDeclaration_Possibilities
	::= ConstantDeclaration |
		FieldDeclaration |
		MethodDeclaration |
		PropertyDeclaration |
		EventDeclaration |
		IndexerDeclaration |
		OperatorDeclaration |
		ConstructorDeclaration |
		StaticConstructorDeclaration |
		TypeDeclaration
		;
		
EmbeddedStatement_Possibilities
	::= Block |
		EmptyStatement |
		ExpressionStatement |
		SelectionStatement |
		IterationStatement |
		JumpStatement |
		TryStatement |
		CheckedStatement |
		UncheckedStatement |
		LockStatement |
		UsingStatement
		;
		
StatementExpression_Possibilities
	::= InvocationExpression |
		ObjectCreationExpression |
		Assignment |
		PostIncrementExpression |
		PostDecrementExpression |
		PreIncrementExpression |
		PreDecrementExpression
		;
		
/* -------------------------------------------------- *
 *                     Repetition                     *
 * -------------------------------------------------- */
 
AttributesOpt_ModifiersOpt_Event_Type
	::= Attributes_Opt Modifiers_Opt EVENT type
		;

Operator_Type_Lparen_Type_Identifier_Rparen
	::= OPERATOR type LPAREN type IDENTIFIER RPAREN
		;
		
AttributesOpt_Get_Semicolon
	::= Attributes_Opt GET SEMICOLON
		;
		
AttributesOpt_Set_Semicolon
	::= Attributes_Opt SET SEMICOLON
		;
		
AttibutesOpt_Identifier
	::= Attributes_Opt IDENTIFIER
		;
 
/* -------------------------------------------------- *
 *                      Optional                      *
 * -------------------------------------------------- */
		
UsingDirectives_Opt
	::= | UsingDirectives
		;
		
GlobalAttributes_Opt
	::= | global_attributes
		;
		
NamespaceMemberDeclarations_Opt
	::= | NamespaceMemberDeclarations
		;
		
Semicolon_Opt
	::= | SEMICOLON
		;
		
Attributes_Opt
	::= | Attributes
		;
		
ClassBase_Opt
	::= | ClassBase
		;
		
ClassMemberDeclarations_Opt
	::= | ClassMemberDeclarations
		;
		
FormalParameterList_Opt
	::= | FormalParameterList
		;
		
SetAcessorDeclaration_Opt
	::= | SetAcessorDeclaration
		;
		
GetAcessorDeclaration_Opt
	::= | GetAcessorDeclaration
		;
		
ConstructorInitializer_Opt
	::= | ConstructorInitializer
		;
		
StructMemberDeclarations_Opt
	::= | StructMemberDeclarations
		;
		
StructInterfaces_Opt
	::= | StructInterfaces
		;
		
ArgumentList_Opt
	::= | argument_list
		;

DimSeparators_Opt
	::= | DimSeparators
		;
		
VariableInitializerList_Opt
	::= | VariableInitializerList
		;
		
InterfaceBase_Opt
	::= | InterfaceBase
		;
		
InterfaceMemberDeclarations_Opt
	::= | InterfaceMemberDeclarations
		;
		
EnumBase_Opt
	::= | EnumBase
		;
		
EnumMemberDeclarations_Opt
	::= | EnumMemberDeclarations
		;
		
AttributeTargetSpecifier_Opt
	::= | AttributeTargetSpecifier
		;
		
AttributeArguments_Opt
	::= | AttributeArguments
		;
		
PositionalArgumentList_Opt
	::= | PositionalArgumentList
		;
		
Comma_Opt
	::= | COMMA
		;
		
StatementList_Opt
	::= | StatementList
		;
		
SwitchSections_Opt
	::= | SwitchSections
		;
		
ForInitializer_Opt
	::= | ForInitializer
		;
		
ForCondition_Opt
	::= | ForCondition
		;
		
ForIterator_Opt
	::= | ForIterator
		;
		
Expression_Opt
	::= | Expression
		;
		
GeneralCatchClause_Opt
	::= | GeneralCatchClause
		;
		
SpecificCatchClauses_Opt
	::= | SpecificCatchClauses
		;
		
Identifier_Opt
	::= | IDENTIFIER
		;
		
RankSpecifiers_Opt
	::= | RankSpecifiers
		;
		
ArrayInitializer_Opt
	::= | ArrayInitializer
		;