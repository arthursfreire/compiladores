/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package projeto;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>lexica.flex</tt>
 */
public class LexicalAnalysis implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\30\1\0\1\26\1\27\22\0\1\26\1\62\1\35"+
    "\2\0\1\70\1\65\1\33\1\71\1\72\1\32\1\22\1\100\1\23"+
    "\1\24\1\31\1\10\11\1\1\76\1\77\1\61\1\57\1\60\1\64"+
    "\1\0\3\3\1\13\1\21\1\13\5\25\1\6\1\16\7\25\1\4"+
    "\2\25\1\12\2\25\1\74\1\0\1\75\1\67\1\25\1\0\1\36"+
    "\1\37\1\2\1\15\1\20\1\14\1\51\1\46\1\50\1\55\1\44"+
    "\1\7\1\17\1\47\1\43\1\53\1\25\1\42\1\40\1\41\1\5"+
    "\1\52\1\54\1\11\1\45\1\56\1\73\1\66\1\34\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\1\1\4\2\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\0\1\11\1\0\14\2\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\1\1\34\2\0\11\2\1\0\5\2\1\35"+
    "\6\2\1\36\1\37\1\40\1\41\1\34\1\6\1\0"+
    "\1\42\1\43\1\0\1\44\2\2\1\45\25\2\1\46"+
    "\1\2\1\47\1\50\10\2\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\1\1\0\16\2\1\1\2\2\1\65\16\2\1\6"+
    "\1\0\1\66\7\2\1\67\7\2\1\70\3\2\1\71"+
    "\3\2\1\72\4\2\1\73\2\2\1\74\1\75\11\2"+
    "\1\76\1\77\1\34\1\2\1\100\4\2\1\101\5\2"+
    "\1\102\1\103\1\104\14\2\1\105\2\2\1\106\3\2"+
    "\1\107\1\2\1\110\1\111\11\2\1\112\1\113\1\2"+
    "\1\114\6\2\1\115\3\2\1\116\1\2\1\117\7\2"+
    "\1\120\1\121\1\122\2\2\1\123\1\2\1\124\2\2"+
    "\1\125\1\126\1\2\1\127\1\130\11\2\1\131\2\2"+
    "\1\132\1\2\1\133\4\2\1\134\3\2\1\135\14\2"+
    "\1\136\3\2\1\137\2\2\1\140\1\2\1\141\5\2"+
    "\1\142\1\143\1\144\1\145\3\2\1\146\1\2\1\147"+
    "\1\150\1\151\1\152\1\153\1\154\1\155\1\2\1\156"+
    "\1\157\10\2\1\160\1\161\4\2\1\162\1\2\1\163"+
    "\1\164\1\165\1\2\1\166\14\2\1\167\2\2\1\170"+
    "\1\171\1\2\1\172\1\173\1\174\1\175\1\2\1\176"+
    "\1\177\1\200\1\2\1\201\1\2\1\202\1\203\1\2"+
    "\1\204\1\205\1\2\1\206\1\207\1\210\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u038e\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e"+
    "\0\u07df\0\u0820\0\u0861\0\u08a2\0\u038e\0\u038e\0\u08e3\0\u0924"+
    "\0\u0965\0\u09a6\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e"+
    "\0\u038e\0\u038e\0\u09e7\0\u0a28\0\u038e\0\u0a69\0\u034d\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u038e\0\u038e\0\u038e"+
    "\0\u038e\0\u1040\0\u1081\0\u10c2\0\u038e\0\u038e\0\u1103\0\u038e"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b"+
    "\0\303\0\u175c\0\303\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u038e\0\u038e\0\u19e6\0\u038e"+
    "\0\u1a27\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e"+
    "\0\u038e\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee"+
    "\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6"+
    "\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\u230a\0\303\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u24d1\0\303\0\u2512\0\u2553\0\u2594"+
    "\0\u25d5\0\u2616\0\u2657\0\u2698\0\303\0\u26d9\0\u271a\0\u275b"+
    "\0\303\0\u279c\0\u27dd\0\u281e\0\303\0\u285f\0\u28a0\0\u28e1"+
    "\0\u2922\0\303\0\u2963\0\u29a4\0\u29e5\0\303\0\u2a26\0\u2a67"+
    "\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u038e"+
    "\0\u038e\0\u2c6f\0\u2cb0\0\303\0\u2cf1\0\u2d32\0\u2d73\0\u2db4"+
    "\0\303\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\303\0\303"+
    "\0\303\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0"+
    "\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\303\0\u3246\0\u3287"+
    "\0\303\0\u32c8\0\u3309\0\u334a\0\303\0\u338b\0\303\0\303"+
    "\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593"+
    "\0\u35d4\0\303\0\u3615\0\u3656\0\303\0\u3697\0\u36d8\0\u3719"+
    "\0\u375a\0\u379b\0\u37dc\0\303\0\u381d\0\u385e\0\u389f\0\303"+
    "\0\u38e0\0\303\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66"+
    "\0\u3aa7\0\303\0\303\0\303\0\u3ae8\0\u3b29\0\303\0\u3b6a"+
    "\0\303\0\u3bab\0\u3bec\0\303\0\303\0\u3c2d\0\303\0\303"+
    "\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35"+
    "\0\u3e76\0\303\0\u3eb7\0\u3ef8\0\303\0\u3f39\0\303\0\u3f7a"+
    "\0\u3fbb\0\u3ffc\0\u403d\0\303\0\u407e\0\u40bf\0\u4100\0\303"+
    "\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308"+
    "\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510"+
    "\0\303\0\u4551\0\u4592\0\303\0\u45d3\0\303\0\u4614\0\u4655"+
    "\0\u4696\0\u46d7\0\u4718\0\303\0\303\0\303\0\303\0\u4759"+
    "\0\u479a\0\u47db\0\303\0\u481c\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\u485d\0\303\0\303\0\u489e\0\u48df"+
    "\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\303\0\303"+
    "\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\303\0\u4baa\0\303\0\303"+
    "\0\303\0\u4beb\0\303\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30"+
    "\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\303"+
    "\0\u4f38\0\u4f79\0\303\0\303\0\u4fba\0\303\0\303\0\303"+
    "\0\303\0\u4ffb\0\303\0\303\0\303\0\u503c\0\303\0\u507d"+
    "\0\303\0\303\0\u50be\0\303\0\303\0\u50ff\0\303\0\303"+
    "\0\303\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\2\4\1\5\1\4\1\6\1\7"+
    "\3\4\1\10\1\11\1\4\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\4\3\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\3\4"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\4\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\0\1\2\2\0\2\63\2\64\1\2\2\0"+
    "\5\65\2\66\2\0\1\67\55\0\6\4\1\70\12\4"+
    "\3\0\1\4\10\0\1\71\4\4\1\72\2\4\1\73"+
    "\10\4\23\0\21\4\3\0\1\4\10\0\21\4\23\0"+
    "\6\4\1\74\12\4\3\0\1\4\10\0\2\4\1\75"+
    "\6\4\1\76\1\77\6\4\23\0\21\4\3\0\1\4"+
    "\10\0\5\4\1\100\13\4\23\0\1\2\2\0\2\63"+
    "\2\64\1\2\2\101\5\65\2\66\2\0\1\67\55\0"+
    "\6\4\1\102\12\4\3\0\1\4\10\0\1\103\4\4"+
    "\1\104\4\4\1\105\6\4\23\0\17\4\1\106\1\4"+
    "\3\0\1\4\10\0\5\4\1\107\13\4\23\0\17\4"+
    "\1\110\1\4\3\0\1\4\10\0\5\4\1\111\13\4"+
    "\23\0\6\4\1\112\1\4\1\113\10\4\3\0\1\4"+
    "\10\0\11\4\1\114\2\4\1\115\4\4\44\0\1\116"+
    "\34\0\1\117\44\0\1\120\33\0\1\121\22\0\1\122"+
    "\6\0\1\122\222\0\1\123\1\124\24\0\1\125\100\0"+
    "\1\126\21\0\33\22\1\0\1\127\44\22\35\24\1\130"+
    "\43\24\1\0\14\4\1\131\4\4\3\0\1\4\10\0"+
    "\1\4\1\132\1\133\16\4\23\0\21\4\3\0\1\4"+
    "\10\0\1\134\3\4\1\135\1\136\1\4\1\137\11\4"+
    "\23\0\17\4\1\140\1\4\3\0\1\4\10\0\1\4"+
    "\1\141\1\4\1\142\4\4\1\143\1\4\1\144\3\4"+
    "\1\145\2\4\23\0\21\4\3\0\1\4\10\0\4\4"+
    "\1\146\2\4\1\147\1\150\10\4\23\0\17\4\1\151"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\4\4\1\152"+
    "\14\4\3\0\1\4\10\0\1\4\1\153\12\4\1\154"+
    "\1\155\3\4\23\0\4\4\1\156\12\4\1\157\1\4"+
    "\3\0\1\4\10\0\1\160\20\4\23\0\13\4\1\161"+
    "\2\4\1\162\2\4\3\0\1\4\10\0\2\4\1\163"+
    "\6\4\1\164\7\4\23\0\17\4\1\165\1\4\3\0"+
    "\1\4\10\0\5\4\1\166\13\4\23\0\21\4\3\0"+
    "\1\4\10\0\5\4\1\167\4\4\1\170\6\4\23\0"+
    "\4\4\1\171\14\4\3\0\1\4\10\0\1\172\3\4"+
    "\1\173\14\4\23\0\21\4\3\0\1\4\10\0\10\4"+
    "\1\174\10\4\101\0\1\175\100\0\1\176\1\177\77\0"+
    "\1\200\1\0\1\201\76\0\1\202\100\0\1\203\5\0"+
    "\1\204\72\0\1\205\6\0\1\206\71\0\1\207\100\0"+
    "\1\210\27\0\2\211\75\0\2\211\115\0\2\212\56\0"+
    "\21\4\3\0\1\4\10\0\1\213\20\4\23\0\21\4"+
    "\3\0\1\4\10\0\2\4\1\214\1\215\15\4\23\0"+
    "\21\4\3\0\1\4\10\0\11\4\1\216\7\4\23\0"+
    "\17\4\1\217\1\4\3\0\1\4\10\0\1\220\20\4"+
    "\23\0\21\4\3\0\1\4\10\0\5\4\1\221\13\4"+
    "\23\0\21\4\3\0\1\4\10\0\10\4\1\222\1\4"+
    "\1\223\6\4\23\0\1\4\1\224\17\4\3\0\1\4"+
    "\10\0\2\4\1\225\16\4\23\0\21\4\3\0\1\4"+
    "\10\0\11\4\1\226\7\4\23\0\1\4\1\227\17\4"+
    "\3\0\1\4\10\0\11\4\1\230\7\4\23\0\3\231"+
    "\4\0\1\231\2\0\3\231\2\0\2\231\14\0\2\231"+
    "\42\0\21\4\3\0\1\4\10\0\5\4\1\232\13\4"+
    "\23\0\6\4\1\233\12\4\3\0\1\4\10\0\21\4"+
    "\23\0\21\4\3\0\1\4\10\0\4\4\1\234\14\4"+
    "\23\0\10\4\1\235\6\4\1\236\1\4\3\0\1\4"+
    "\10\0\11\4\1\237\7\4\23\0\1\4\1\240\4\4"+
    "\1\241\4\4\1\242\5\4\3\0\1\4\10\0\21\4"+
    "\23\0\4\4\1\243\14\4\3\0\1\4\10\0\21\4"+
    "\23\0\21\4\3\0\1\4\10\0\3\4\1\244\15\4"+
    "\23\0\14\4\1\245\4\4\3\0\1\4\10\0\21\4"+
    "\23\0\21\4\3\0\1\4\10\0\2\4\1\246\16\4"+
    "\23\0\21\4\3\0\1\4\10\0\3\4\1\247\11\4"+
    "\1\250\3\4\23\0\4\4\1\251\14\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\252\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\1\122\6\0\1\122\2\0\5\65"+
    "\2\66\57\0\27\123\1\253\1\17\50\123\32\124\1\254"+
    "\46\124\33\22\1\130\1\127\44\22\1\0\14\4\1\255"+
    "\4\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\2\4\1\256\16\4\23\0\21\4\3\0"+
    "\1\4\10\0\2\4\1\257\16\4\23\0\21\4\3\0"+
    "\1\4\10\0\2\4\1\260\16\4\23\0\17\4\1\261"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\5\4\1\262\13\4\23\0\21\4\3\0"+
    "\1\4\10\0\3\4\1\263\15\4\23\0\21\4\3\0"+
    "\1\4\10\0\1\264\2\4\1\265\15\4\23\0\21\4"+
    "\3\0\1\4\10\0\7\4\1\266\11\4\23\0\21\4"+
    "\3\0\1\4\10\0\1\267\3\4\1\270\14\4\23\0"+
    "\21\4\3\0\1\4\10\0\5\4\1\271\13\4\23\0"+
    "\21\4\3\0\1\4\10\0\20\4\1\272\23\0\21\4"+
    "\3\0\1\4\10\0\12\4\1\273\6\4\23\0\4\4"+
    "\1\274\14\4\3\0\1\4\10\0\7\4\1\275\11\4"+
    "\23\0\21\4\3\0\1\4\10\0\15\4\1\276\3\4"+
    "\23\0\21\4\3\0\1\4\10\0\4\4\1\277\5\4"+
    "\1\300\6\4\23\0\13\4\1\301\2\4\1\302\2\4"+
    "\3\0\1\4\10\0\1\303\2\4\1\304\15\4\23\0"+
    "\21\4\3\0\1\4\10\0\3\4\1\305\15\4\23\0"+
    "\21\4\3\0\1\4\10\0\17\4\1\306\1\4\23\0"+
    "\17\4\1\307\1\4\3\0\1\4\10\0\21\4\23\0"+
    "\17\4\1\310\1\4\3\0\1\4\10\0\21\4\23\0"+
    "\6\4\1\311\12\4\3\0\1\4\10\0\21\4\23\0"+
    "\21\4\3\0\1\4\10\0\16\4\1\312\2\4\23\0"+
    "\16\4\1\313\2\4\3\0\1\4\10\0\21\4\23\0"+
    "\21\4\3\0\1\4\10\0\15\4\1\314\3\4\23\0"+
    "\21\4\3\0\1\4\10\0\3\4\1\315\15\4\23\0"+
    "\21\4\3\0\1\4\10\0\3\4\1\316\15\4\23\0"+
    "\21\4\3\0\1\4\10\0\3\4\1\317\15\4\23\0"+
    "\6\4\1\320\12\4\3\0\1\4\10\0\12\4\1\321"+
    "\6\4\23\0\21\4\3\0\1\4\10\0\4\4\1\322"+
    "\14\4\23\0\21\4\3\0\1\4\10\0\1\4\1\323"+
    "\17\4\23\0\21\4\3\0\1\4\10\0\4\4\1\324"+
    "\14\4\23\0\21\4\3\0\1\4\10\0\5\4\1\325"+
    "\4\4\1\326\6\4\23\0\21\4\3\0\1\4\10\0"+
    "\12\4\1\327\6\4\101\0\1\330\100\0\1\331\22\0"+
    "\1\332\6\0\1\332\71\0\21\4\3\0\1\4\10\0"+
    "\2\4\1\333\16\4\23\0\17\4\1\334\1\4\3\0"+
    "\1\4\10\0\21\4\23\0\1\4\1\335\17\4\3\0"+
    "\1\4\10\0\21\4\23\0\21\4\3\0\1\4\10\0"+
    "\2\4\1\336\1\337\15\4\23\0\1\4\1\340\17\4"+
    "\3\0\1\4\10\0\21\4\23\0\21\4\3\0\1\4"+
    "\10\0\4\4\1\341\14\4\23\0\21\4\3\0\1\4"+
    "\10\0\11\4\1\342\7\4\23\0\21\4\3\0\1\4"+
    "\10\0\5\4\1\343\13\4\23\0\21\4\3\0\1\4"+
    "\10\0\11\4\1\344\7\4\23\0\21\4\3\0\1\4"+
    "\10\0\10\4\1\345\10\4\23\0\21\4\3\0\1\4"+
    "\10\0\1\346\20\4\23\0\21\4\3\0\1\4\10\0"+
    "\3\4\1\347\15\4\23\0\21\4\3\0\1\4\10\0"+
    "\6\4\1\350\12\4\23\0\21\4\3\0\1\4\10\0"+
    "\13\4\1\351\5\4\23\0\3\231\2\63\2\64\1\231"+
    "\2\0\3\231\2\0\2\231\14\0\2\231\42\0\21\4"+
    "\3\0\1\4\10\0\1\352\20\4\23\0\21\4\3\0"+
    "\1\4\10\0\2\4\1\353\16\4\23\0\17\4\1\354"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\17\4\1\355"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\6\4\1\356"+
    "\12\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\1\357\20\4\23\0\21\4\3\0\1\4"+
    "\10\0\12\4\1\360\6\4\23\0\17\4\1\361\1\4"+
    "\3\0\1\4\10\0\21\4\23\0\21\4\3\0\1\4"+
    "\10\0\1\362\20\4\23\0\21\4\3\0\1\4\10\0"+
    "\1\4\1\363\17\4\23\0\21\4\3\0\1\4\10\0"+
    "\10\4\1\364\10\4\23\0\4\4\1\365\14\4\3\0"+
    "\1\4\10\0\21\4\23\0\17\4\1\366\1\4\3\0"+
    "\1\4\10\0\21\4\23\0\17\4\1\367\1\4\3\0"+
    "\1\4\10\0\21\4\23\0\6\4\1\370\12\4\3\0"+
    "\1\4\10\0\21\4\23\0\16\4\1\371\2\4\3\0"+
    "\1\4\10\0\21\4\23\0\21\4\3\0\1\4\10\0"+
    "\11\4\1\372\7\4\52\0\1\17\50\0\31\124\1\17"+
    "\1\254\46\124\1\0\21\4\3\0\1\4\10\0\3\4"+
    "\1\373\15\4\23\0\17\4\1\374\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\375\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\1\376"+
    "\20\4\23\0\6\4\1\377\12\4\3\0\1\4\10\0"+
    "\21\4\23\0\17\4\1\u0100\1\4\3\0\1\4\10\0"+
    "\21\4\23\0\6\4\1\u0101\12\4\3\0\1\4\10\0"+
    "\21\4\23\0\21\4\3\0\1\4\10\0\3\4\1\u0102"+
    "\15\4\23\0\1\4\1\u0103\17\4\3\0\1\4\10\0"+
    "\3\4\1\u0104\15\4\23\0\4\4\1\u0105\14\4\3\0"+
    "\1\4\10\0\12\4\1\u0106\6\4\23\0\21\4\3\0"+
    "\1\4\10\0\4\4\1\u0107\14\4\23\0\17\4\1\u0108"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\3\4\1\u0109\15\4\23\0\17\4\1\u010a"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\17\4\1\u010b"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\5\4\1\u010c\13\4\23\0\21\4\3\0"+
    "\1\4\10\0\2\4\1\u010d\16\4\23\0\21\4\3\0"+
    "\1\4\10\0\5\4\1\u010e\13\4\23\0\14\4\1\u010f"+
    "\4\4\3\0\1\4\10\0\21\4\23\0\4\4\1\u0110"+
    "\14\4\3\0\1\4\10\0\21\4\23\0\17\4\1\u0111"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\4\4\1\u0112\14\4\23\0\21\4\3\0"+
    "\1\4\10\0\4\4\1\u0113\14\4\23\0\6\4\1\u0114"+
    "\12\4\3\0\1\4\10\0\21\4\23\0\17\4\1\u0115"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\6\4\1\u0116"+
    "\12\4\3\0\1\4\10\0\21\4\23\0\17\4\1\u0117"+
    "\1\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\5\4\1\u0118\13\4\23\0\21\4\3\0"+
    "\1\4\10\0\1\u0119\20\4\23\0\14\4\1\u011a\4\4"+
    "\3\0\1\4\10\0\21\4\23\0\21\4\3\0\1\4"+
    "\10\0\3\4\1\u011b\15\4\23\0\6\4\1\u011c\12\4"+
    "\3\0\1\4\10\0\21\4\23\0\21\4\3\0\1\4"+
    "\10\0\1\u011d\20\4\23\0\21\4\3\0\1\4\10\0"+
    "\3\4\1\u011e\11\4\1\u011f\3\4\23\0\21\4\3\0"+
    "\1\4\10\0\14\4\1\u0120\4\4\23\0\6\4\1\u0121"+
    "\12\4\3\0\1\4\10\0\21\4\23\0\1\332\6\0"+
    "\1\332\2\0\5\65\62\0\21\4\3\0\1\4\10\0"+
    "\2\4\1\u0122\16\4\23\0\21\4\3\0\1\4\10\0"+
    "\10\4\1\u0123\10\4\23\0\21\4\3\0\1\4\10\0"+
    "\3\4\1\u0124\15\4\23\0\21\4\3\0\1\4\10\0"+
    "\12\4\1\u0125\6\4\23\0\21\4\3\0\1\4\10\0"+
    "\6\4\1\u0126\12\4\23\0\21\4\3\0\1\4\10\0"+
    "\13\4\1\u0127\5\4\23\0\21\4\3\0\1\4\10\0"+
    "\4\4\1\u0128\14\4\23\0\21\4\3\0\1\4\10\0"+
    "\13\4\1\u0129\5\4\23\0\17\4\1\u012a\1\4\3\0"+
    "\1\4\10\0\21\4\23\0\13\4\1\u012b\5\4\3\0"+
    "\1\4\10\0\21\4\23\0\21\4\3\0\1\4\10\0"+
    "\3\4\1\u012c\15\4\23\0\17\4\1\u012d\1\4\3\0"+
    "\1\4\10\0\21\4\23\0\21\4\3\0\1\4\10\0"+
    "\1\u012e\20\4\23\0\14\4\1\u012f\4\4\3\0\1\4"+
    "\10\0\21\4\23\0\14\4\1\u0130\4\4\3\0\1\4"+
    "\10\0\21\4\23\0\6\4\1\u0131\12\4\3\0\1\4"+
    "\10\0\21\4\23\0\16\4\1\u0132\2\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\13\4"+
    "\1\u0133\5\4\23\0\4\4\1\u0134\14\4\3\0\1\4"+
    "\10\0\21\4\23\0\6\4\1\u0135\12\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\5\4"+
    "\1\u0136\13\4\23\0\6\4\1\u0137\12\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\4\4"+
    "\1\u0138\14\4\23\0\21\4\3\0\1\4\10\0\12\4"+
    "\1\u0139\6\4\23\0\21\4\3\0\1\4\10\0\3\4"+
    "\1\u013a\15\4\23\0\21\4\3\0\1\4\10\0\4\4"+
    "\1\u013b\14\4\23\0\16\4\1\u013c\2\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\6\4"+
    "\1\u013d\12\4\23\0\17\4\1\u013e\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\u013f\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\6\4"+
    "\1\u0140\12\4\23\0\21\4\3\0\1\4\10\0\12\4"+
    "\1\u0141\6\4\23\0\1\4\1\u0142\17\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\11\4"+
    "\1\u0143\7\4\23\0\21\4\3\0\1\4\10\0\3\4"+
    "\1\u0144\15\4\23\0\21\4\3\0\1\4\10\0\5\4"+
    "\1\u0145\13\4\23\0\1\4\1\u0146\17\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\5\4"+
    "\1\u0147\13\4\23\0\21\4\3\0\1\4\10\0\16\4"+
    "\1\u0148\2\4\23\0\21\4\3\0\1\4\10\0\14\4"+
    "\1\u0149\4\4\23\0\21\4\3\0\1\4\10\0\5\4"+
    "\1\u014a\13\4\23\0\21\4\3\0\1\4\10\0\4\4"+
    "\1\u014b\14\4\23\0\1\4\1\u014c\17\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\4\4"+
    "\1\u014d\14\4\23\0\21\4\3\0\1\4\10\0\1\u014e"+
    "\20\4\23\0\21\4\3\0\1\4\10\0\2\4\1\u014f"+
    "\16\4\23\0\21\4\3\0\1\4\10\0\12\4\1\u0150"+
    "\6\4\23\0\21\4\3\0\1\4\10\0\4\4\1\u0151"+
    "\14\4\23\0\21\4\3\0\1\4\10\0\3\4\1\u0152"+
    "\15\4\23\0\4\4\1\u0153\14\4\3\0\1\4\10\0"+
    "\21\4\23\0\21\4\3\0\1\4\10\0\12\4\1\u0154"+
    "\6\4\23\0\16\4\1\u0155\2\4\3\0\1\4\10\0"+
    "\21\4\23\0\17\4\1\u0156\1\4\3\0\1\4\10\0"+
    "\21\4\23\0\17\4\1\u0157\1\4\3\0\1\4\10\0"+
    "\21\4\23\0\21\4\3\0\1\4\10\0\1\u0158\20\4"+
    "\23\0\17\4\1\u0159\1\4\3\0\1\4\10\0\21\4"+
    "\23\0\21\4\3\0\1\4\10\0\11\4\1\u015a\7\4"+
    "\23\0\17\4\1\u015b\1\4\3\0\1\4\10\0\21\4"+
    "\23\0\21\4\3\0\1\4\10\0\3\4\1\u015c\15\4"+
    "\23\0\1\4\1\u015d\17\4\3\0\1\4\10\0\21\4"+
    "\23\0\17\4\1\u015e\1\4\3\0\1\4\10\0\21\4"+
    "\23\0\1\4\1\u015f\17\4\3\0\1\4\10\0\21\4"+
    "\23\0\6\4\1\u0160\12\4\3\0\1\4\10\0\21\4"+
    "\23\0\21\4\3\0\1\4\10\0\1\u0161\20\4\23\0"+
    "\21\4\3\0\1\4\10\0\1\u0162\20\4\23\0\6\4"+
    "\1\u0163\12\4\3\0\1\4\10\0\21\4\23\0\17\4"+
    "\1\u0164\1\4\3\0\1\4\10\0\21\4\23\0\14\4"+
    "\1\u0165\4\4\3\0\1\4\10\0\21\4\23\0\17\4"+
    "\1\u0166\1\4\3\0\1\4\10\0\21\4\23\0\21\4"+
    "\3\0\1\4\10\0\11\4\1\u0167\7\4\23\0\1\4"+
    "\1\u0168\17\4\3\0\1\4\10\0\21\4\23\0\21\4"+
    "\3\0\1\4\10\0\1\u0169\20\4\23\0\21\4\3\0"+
    "\1\4\10\0\1\4\1\u016a\17\4\23\0\14\4\1\u016b"+
    "\4\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\1\u016c\20\4\23\0\1\4\1\u016d\17\4"+
    "\3\0\1\4\10\0\21\4\23\0\21\4\3\0\1\4"+
    "\10\0\3\4\1\u016e\15\4\23\0\21\4\3\0\1\4"+
    "\10\0\13\4\1\u016f\5\4\23\0\13\4\1\u0170\5\4"+
    "\3\0\1\4\10\0\21\4\23\0\21\4\3\0\1\4"+
    "\10\0\10\4\1\u0171\10\4\23\0\13\4\1\u0172\5\4"+
    "\3\0\1\4\10\0\21\4\23\0\17\4\1\u0173\1\4"+
    "\3\0\1\4\10\0\21\4\23\0\21\4\3\0\1\4"+
    "\10\0\11\4\1\u0174\7\4\23\0\21\4\3\0\1\4"+
    "\10\0\11\4\1\u0175\7\4\23\0\21\4\3\0\1\4"+
    "\10\0\3\4\1\u0176\15\4\23\0\21\4\3\0\1\4"+
    "\10\0\12\4\1\u0177\6\4\23\0\21\4\3\0\1\4"+
    "\10\0\3\4\1\u0178\15\4\23\0\21\4\3\0\1\4"+
    "\10\0\15\4\1\u0179\3\4\23\0\1\4\1\u017a\17\4"+
    "\3\0\1\4\10\0\21\4\23\0\13\4\1\u017b\5\4"+
    "\3\0\1\4\10\0\11\4\1\u017c\7\4\23\0\21\4"+
    "\3\0\1\4\10\0\12\4\1\u017d\6\4\23\0\21\4"+
    "\3\0\1\4\10\0\1\u017e\20\4\23\0\1\4\1\u017f"+
    "\17\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\2\4\1\u0180\16\4\23\0\1\4\1\u0181"+
    "\17\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\4\4\1\u0182\14\4\23\0\21\4\3\0"+
    "\1\4\10\0\3\4\1\u0183\15\4\23\0\4\4\1\u0184"+
    "\14\4\3\0\1\4\10\0\21\4\23\0\14\4\1\u0185"+
    "\4\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\6\4\1\u0186\12\4\23\0\21\4\3\0"+
    "\1\4\10\0\10\4\1\u0187\10\4\23\0\21\4\3\0"+
    "\1\4\10\0\7\4\1\u0188\11\4\23\0\6\4\1\u0189"+
    "\12\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\3\4\1\u018a\15\4\23\0\21\4\3\0"+
    "\1\4\10\0\3\4\1\u018b\15\4\23\0\21\4\3\0"+
    "\1\4\10\0\12\4\1\u018c\6\4\23\0\1\4\1\u018d"+
    "\17\4\3\0\1\4\10\0\21\4\23\0\6\4\1\u018e"+
    "\12\4\3\0\1\4\10\0\21\4\23\0\6\4\1\u018f"+
    "\12\4\3\0\1\4\10\0\21\4\23\0\6\4\1\u0190"+
    "\12\4\3\0\1\4\10\0\21\4\23\0\14\4\1\u0191"+
    "\4\4\3\0\1\4\10\0\21\4\23\0\21\4\3\0"+
    "\1\4\10\0\5\4\1\u0192\13\4\23\0\21\4\3\0"+
    "\1\4\10\0\1\u0193\20\4\23\0\21\4\3\0\1\4"+
    "\10\0\12\4\1\u0194\6\4\23\0\21\4\3\0\1\4"+
    "\10\0\1\u0195\20\4\23\0\21\4\3\0\1\4\10\0"+
    "\1\u0196\20\4\23\0\6\4\1\u0197\12\4\3\0\1\4"+
    "\10\0\21\4\23\0\6\4\1\u0198\12\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\3\4"+
    "\1\u0199\15\4\23\0\21\4\3\0\1\4\10\0\3\4"+
    "\1\u019a\15\4\23\0\17\4\1\u019b\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\u019c\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\u019d\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\u019e\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\3\4"+
    "\1\u019f\15\4\23\0\21\4\3\0\1\4\10\0\3\4"+
    "\1\u01a0\15\4\23\0\21\4\3\0\1\4\10\0\7\4"+
    "\1\u01a1\11\4\23\0\6\4\1\u01a2\12\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\7\4"+
    "\1\u01a3\11\4\23\0\17\4\1\u01a4\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\4\4"+
    "\1\u01a5\14\4\23\0\1\4\1\u01a6\17\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\3\4"+
    "\1\u01a7\15\4\23\0\1\4\1\u01a8\17\4\3\0\1\4"+
    "\10\0\21\4\23\0\6\4\1\u01a9\12\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\u01aa\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\u01ab\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\7\4"+
    "\1\u01ac\11\4\23\0\14\4\1\u01ad\4\4\3\0\1\4"+
    "\10\0\21\4\23\0\21\4\3\0\1\4\10\0\5\4"+
    "\1\u01ae\13\4\23\0\17\4\1\u01af\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\17\4\1\u01b0\1\4\3\0\1\4"+
    "\10\0\21\4\23\0\14\4\1\u01b1\4\4\3\0\1\4"+
    "\10\0\21\4\23\0\1\4\1\u01b2\17\4\3\0\1\4"+
    "\10\0\21\4\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\15\1\1\11\2\1\1\0\1\11\1\0\20\1"+
    "\2\11\4\1\10\11\2\1\1\11\2\0\11\1\1\0"+
    "\14\1\4\11\2\1\1\0\2\11\1\0\1\11\44\1"+
    "\2\11\1\1\1\11\1\1\10\11\1\0\41\1\1\0"+
    "\53\1\2\11\331\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[434];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	   
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
   	
	private Symbol symbol(int type, Object val) {
		return new Symbol(type, yyline, yycolumn, val);
	}
   	   
	private void mensagemErro() {
		throw new RuntimeException("Erro Lexico na linha " + yyline + " e coluna " + yycolumn + " . Nao existe padrao para o lexema: " + yytext());
	}
   	   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalysis(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalysis(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(sym.INTEGER_LITERAL, yytext());
          }
        case 138: break;
        case 2: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 139: break;
        case 3: 
          { return symbol(sym.PLUS);
          }
        case 140: break;
        case 4: 
          { return symbol(sym.MINUS);
          }
        case 141: break;
        case 5: 
          { return symbol(sym.DOT);
          }
        case 142: break;
        case 6: 
          { 
          }
        case 143: break;
        case 7: 
          { return symbol(sym.DIV);
          }
        case 144: break;
        case 8: 
          { return symbol(sym.MULT);
          }
        case 145: break;
        case 9: 
          { return symbol(sym.RBRACE);
          }
        case 146: break;
        case 10: 
          { return symbol(sym.EQ);
          }
        case 147: break;
        case 11: 
          { return symbol(sym.GT);
          }
        case 148: break;
        case 12: 
          { return symbol(sym.LT);
          }
        case 149: break;
        case 13: 
          { return symbol(sym.NOT);
          }
        case 150: break;
        case 14: 
          { return symbol(sym.COMP);
          }
        case 151: break;
        case 15: 
          { return symbol(sym.QUESTION);
          }
        case 152: break;
        case 16: 
          { return symbol(sym.AND);
          }
        case 153: break;
        case 17: 
          { return symbol(sym.OR);
          }
        case 154: break;
        case 18: 
          { return symbol(sym.XOR);
          }
        case 155: break;
        case 19: 
          { return symbol(sym.MOD);
          }
        case 156: break;
        case 20: 
          { return symbol(sym.LPAREN);
          }
        case 157: break;
        case 21: 
          { return symbol(sym.RPAREN);
          }
        case 158: break;
        case 22: 
          { return symbol(sym.LBRACE);
          }
        case 159: break;
        case 23: 
          { return symbol(sym.LBRACK);
          }
        case 160: break;
        case 24: 
          { return symbol(sym.RBRACK);
          }
        case 161: break;
        case 25: 
          { return symbol(sym.COLON);
          }
        case 162: break;
        case 26: 
          { return symbol(sym.SEMICOLON);
          }
        case 163: break;
        case 27: 
          { return symbol(sym.COMMA);
          }
        case 164: break;
        case 28: 
          { return symbol(sym.REAL_LITERAL, yytext());
          }
        case 165: break;
        case 29: 
          { return symbol(sym.DO);
          }
        case 166: break;
        case 30: 
          { return symbol(sym.PLUSPLUS);
          }
        case 167: break;
        case 31: 
          { return symbol(sym.PLUSEQ);
          }
        case 168: break;
        case 32: 
          { return symbol(sym.MINUSMINUS);
          }
        case 169: break;
        case 33: 
          { return symbol(sym.MINUSEQ);
          }
        case 170: break;
        case 34: 
          { return symbol(sym.DIVEQ);
          }
        case 171: break;
        case 35: 
          { return symbol(sym.MULTEQ);
          }
        case 172: break;
        case 36: 
          { return symbol(sym.STRING_LITERAL, yytext());
          }
        case 173: break;
        case 37: 
          { return symbol(sym.AS);
          }
        case 174: break;
        case 38: 
          { return symbol(sym.IF);
          }
        case 175: break;
        case 39: 
          { return symbol(sym.IS);
          }
        case 176: break;
        case 40: 
          { return symbol(sym.IN);
          }
        case 177: break;
        case 41: 
          { return symbol(sym.EQEQ);
          }
        case 178: break;
        case 42: 
          { return symbol(sym.GTEQ);
          }
        case 179: break;
        case 43: 
          { return symbol(sym.RSHIFT);
          }
        case 180: break;
        case 44: 
          { return symbol(sym.LTEQ);
          }
        case 181: break;
        case 45: 
          { return symbol(sym.LSHIFT);
          }
        case 182: break;
        case 46: 
          { return symbol(sym.NOTEQ);
          }
        case 183: break;
        case 47: 
          { return symbol(sym.ANDEQ);
          }
        case 184: break;
        case 48: 
          { return symbol(sym.ANDAND);
          }
        case 185: break;
        case 49: 
          { return symbol(sym.OREQ);
          }
        case 186: break;
        case 50: 
          { return symbol(sym.OROR);
          }
        case 187: break;
        case 51: 
          { return symbol(sym.XOREQ);
          }
        case 188: break;
        case 52: 
          { return symbol(sym.MODEQ);
          }
        case 189: break;
        case 53: 
          { return symbol(sym.FOR);
          }
        case 190: break;
        case 54: 
          { return symbol(sym.ADD);
          }
        case 191: break;
        case 55: 
          { return symbol(sym.SET);
          }
        case 192: break;
        case 56: 
          { return symbol(sym.TRY);
          }
        case 193: break;
        case 57: 
          { return symbol(sym.REF);
          }
        case 194: break;
        case 58: 
          { return symbol(sym.OUT);
          }
        case 195: break;
        case 59: 
          { return symbol(sym.NEW);
          }
        case 196: break;
        case 60: 
          { return symbol(sym.INT);
          }
        case 197: break;
        case 61: 
          { return symbol(sym.GET);
          }
        case 198: break;
        case 62: 
          { return symbol(sym.RSHIFTEQ);
          }
        case 199: break;
        case 63: 
          { return symbol(sym.LSHIFTEQ);
          }
        case 200: break;
        case 64: 
          { return symbol(sym.CASE);
          }
        case 201: break;
        case 65: 
          { return symbol(sym.CHAR);
          }
        case 202: break;
        case 66: 
          { return symbol(sym.UINT);
          }
        case 203: break;
        case 67: 
          { return symbol(sym.LOCK);
          }
        case 204: break;
        case 68: 
          { return symbol(sym.LONG);
          }
        case 205: break;
        case 69: 
          { return symbol(sym.ELSE);
          }
        case 206: break;
        case 70: 
          { return symbol(sym.ENUM);
          }
        case 207: break;
        case 71: 
          { return symbol(sym.BASE);
          }
        case 208: break;
        case 72: 
          { return symbol(sym.BOOL);
          }
        case 209: break;
        case 73: 
          { return symbol(sym.BYTE);
          }
        case 210: break;
        case 74: 
          { return symbol(sym.TRUE);
          }
        case 211: break;
        case 75: 
          { return symbol(sym.TYPE):
          }
        case 212: break;
        case 76: 
          { return symbol(sym.THIS);
          }
        case 213: break;
        case 77: 
          { return symbol(sym.NULL);
          }
        case 214: break;
        case 78: 
          { return symbol(sym.GOTO);
          }
        case 215: break;
        case 79: 
          { return symbol(sym.VOID);
          }
        case 216: break;
        case 80: 
          { return symbol(sym.CLASS);
          }
        case 217: break;
        case 81: 
          { return symbol(sym.CATCH);
          }
        case 218: break;
        case 82: 
          { return symbol(sym.CONST);
          }
        case 219: break;
        case 83: 
          { return symbol(sym.ULONG);
          }
        case 220: break;
        case 84: 
          { return symbol(sym.USING);
          }
        case 221: break;
        case 85: 
          { return symbol(sym.FLOAT);
          }
        case 222: break;
        case 86: 
          { return symbol(sym.FALSE);
          }
        case 223: break;
        case 87: 
          { return symbol(sym.FIXED);
          }
        case 224: break;
        case 88: 
          { return symbol(sym.FIELD):
          }
        case 225: break;
        case 89: 
          { return symbol(sym.EVENT);
          }
        case 226: break;
        case 90: 
          { return symbol(sym.BREAK);
          }
        case 227: break;
        case 91: 
          { return symbol(sym.SBYTE);
          }
        case 228: break;
        case 92: 
          { return symbol(sym.SHORT);
          }
        case 229: break;
        case 93: 
          { return symbol(sym.THROW);
          }
        case 230: break;
        case 94: 
          { return symbol(sym.PARAM):
          }
        case 231: break;
        case 95: 
          { return symbol(sym.WHILE);
          }
        case 232: break;
        case 96: 
          { return symbol(sym.USHORT);
          }
        case 233: break;
        case 97: 
          { return symbol(sym.UNSAFE);
          }
        case 234: break;
        case 98: 
          { return symbol(sym.DOUBLE);
          }
        case 235: break;
        case 99: 
          { return symbol(sym.METHOD):
          }
        case 236: break;
        case 100: 
          { return symbol(sym.MODULE):
          }
        case 237: break;
        case 101: 
          { return symbol(sym.EXTERN);
          }
        case 238: break;
        case 102: 
          { return symbol(sym.SEALED);
          }
        case 239: break;
        case 103: 
          { return symbol(sym.STATIC);
          }
        case 240: break;
        case 104: 
          { return symbol(sym.STRUCT);
          }
        case 241: break;
        case 105: 
          { return symbol(sym.STRING);
          }
        case 242: break;
        case 106: 
          { return symbol(sym.SIZEOF);
          }
        case 243: break;
        case 107: 
          { return symbol(sym.SWITCH);
          }
        case 244: break;
        case 108: 
          { return symbol(sym.TYPEOF);
          }
        case 245: break;
        case 109: 
          { return symbol(sym.REMOVE);
          }
        case 246: break;
        case 110: 
          { return symbol(sym.RETURN);
          }
        case 247: break;
        case 111: 
          { return symbol(sym.OBJECT);
          }
        case 248: break;
        case 112: 
          { return symbol(sym.PUBLIC);
          }
        case 249: break;
        case 113: 
          { return symbol(sym.PARAMS);
          }
        case 250: break;
        case 114: 
          { return symbol(sym.CHECKED);
          }
        case 251: break;
        case 115: 
          { return symbol(sym.FOREACH);
          }
        case 252: break;
        case 116: 
          { return symbol(sym.FINALLY);
          }
        case 253: break;
        case 117: 
          { return symbol(sym.DECIMAL);
          }
        case 254: break;
        case 118: 
          { return symbol(sym.DEFAULT);
          }
        case 255: break;
        case 119: 
          { return symbol(sym.VIRTUAL);
          }
        case 256: break;
        case 120: 
          { return symbol(sym.PRIVATE);
          }
        case 257: break;
        case 121: 
          { return symbol(sym.CONTINUE);
          }
        case 258: break;
        case 122: 
          { return symbol(sym.DELEGATE);
          }
        case 259: break;
        case 123: 
          { return symbol(sym.EXPLICIT);
          }
        case 260: break;
        case 124: 
          { return symbol(sym.ABSTRACT);
          }
        case 261: break;
        case 125: 
          { return symbol(sym.ASSEMBLY):
          }
        case 262: break;
        case 126: 
          { return symbol(sym.READONLY);
          }
        case 263: break;
        case 127: 
          { return symbol(sym.OVERRIDE);
          }
        case 264: break;
        case 128: 
          { return symbol(sym.OPERATOR);
          }
        case 265: break;
        case 129: 
          { return symbol(sym.IMPLICIT);
          }
        case 266: break;
        case 130: 
          { return symbol(sym.INTERNAL);
          }
        case 267: break;
        case 131: 
          { return symbol(sym.VOLATILE);
          }
        case 268: break;
        case 132: 
          { return symbol(sym.PROPERTY):
          }
        case 269: break;
        case 133: 
          { return symbol(sym.UNCHECKED);
          }
        case 270: break;
        case 134: 
          { return symbol(sym.NAMESPACE);
          }
        case 271: break;
        case 135: 
          { return symbol(sym.INTERFACE);
          }
        case 272: break;
        case 136: 
          { return symbol(sym.PROTECTED);
          }
        case 273: break;
        case 137: 
          { return symbol(sym.STACKALLOC);
          }
        case 274: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
